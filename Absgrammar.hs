module Absgrammar where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Progr =
   Program ProgrHead Block
  deriving (Eq,Ord,Show)

data ProgrHead =
   ProgramHeading Ident
  deriving (Eq,Ord,Show)

data Block =
   PBlock DecPart [Stm]
  deriving (Eq,Ord,Show)

data DecPart =
   DeclPart [VarDec] [FunDec]
  deriving (Eq,Ord,Show)

data VarDec =
   VarDecl Ident Type
  deriving (Eq,Ord,Show)

data ValDec =
   ValDecl Ident Type
  deriving (Eq,Ord,Show)

data FunDec =
   FunDecl FunHead Block
  deriving (Eq,Ord,Show)

data FunHead =
   FunHeader Ident [VarDec] [ValDec] Type
  deriving (Eq,Ord,Show)

data Type =
   TInt
 | TBool
 | TArray Integer Type
 | TRecord [ValDec]
 | TFunction [Type] Type
  deriving (Eq,Ord,Show)

data Stm =
   StmBlock [Stm]
 | AssignmentStm LVal Exp
 | IfStm Exp Stm Stm
 | WhileStm Exp Stm
 | ForStm Stm Exp Stm
 | PrintStm Exp
 | ReturnStm Exp
 | Skip
  deriving (Eq,Ord,Show)

data Exp =
   EEqual Exp Exp
 | ENotEqual Exp Exp
 | EGreaterThan Exp Exp
 | ELowerThan Exp Exp
 | EAnd Exp Exp
 | EOr Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | EInt Integer
 | EVar LVal
 | EBool Boolean
 | EFuncCall Ident [Exp]
 | ELambda [VarDec] [ValDec] Type Block
  deriving (Eq,Ord,Show)

data LVal =
   LValIdent Ident
 | LValArrayField Ident Exp
 | LValRecordField Ident Ident
  deriving (Eq,Ord,Show)

data Boolean =
   BoolTrue
 | BoolFalse
  deriving (Eq,Ord,Show)

